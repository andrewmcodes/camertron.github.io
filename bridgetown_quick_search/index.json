[
        {
          "id": "2021-05-21-the-case-for-service-objects",
          "title": "The Case for Service Objects",
          "collection": {
            "label": "posts",
            "name": "Posts"
          },
          "categories": "",
          "tags": "ruby, service objects, web development, rails",
          "url": "/2021/05/21/the-case-for-service-objects/",
          "content": "This article is a response to Jason Swett‚Äôs ‚ÄúBeware of ‚Äòservice objects‚Äô in Rails‚Äù blog post. In it, Jason warns of the dangers of letting service objects rob you of the benefits of object-oriented programming. I‚Äôve read Jason‚Äôs post several times, and listened to a number of discussions he‚Äôs had about service objects on his podcast, Rails with Jason.\n\nBy the way, both Jason‚Äôs blog and podcast are excellent. Go check them out right now üòä\n\nJust last week, Jason was invited onto the Remote Ruby podcast where he and the panelists discussed service objects again. Something about the converstaion struck a cord with me. I‚Äôve listened to Jason talk about his distaste for service objects for a long time. I think he‚Äôs right, but also wrong. What follows are my thoughts on the humble, oft misunderstood, service object.\n\nIntro\n\nRails has been around for a long time now. It feels weird to write this, but it‚Äôll be Rails‚Äô 20th birthday in just a few short years. For those of us who‚Äôve used the framework for a long time, 20 years feels like a pretty incredible milestone.\n\nI started using Rails ~11 years ago, pretty much straight out of college. I worked on Twitter‚Äôs International Engineering Team on the Twitter Translation Center, a Rails app that managed our large database of localized content and facilitated contributions from thousands of volunteer translators around the world. It was my first time using Ruby, and I absolutely fell in love with it. Ruby and Rails made CakePHP, the framework I was using at the time for my side projects, feel pretty clunky and outmoded. Ruby and Rails are still my favorite language and framework today, and I know many other devs who feel the same way.\n\nWhy has Rails had such staying power? I would argue there are two major reasons:\n\n\n  The Ruby and Rails communities are nonpareil in the software world, and\n  Rails keeps evolving.\n\n\nHotwire is just the latest example of the evolution Rails devs have enjoyed for the last two decades. I invite you to look back on the asset pipeline, action cable, and turbolinks as a few examples from the past that also changed the game.\n\nWe‚Äôve Evolved Too\n\nWhile the framework has changed, so have we as Rails developers. A few years ago much noise was made over the ‚Äúfat model, skinny controller‚Äù concept (in case you‚Äôre not familiar, the idea is to keep your controller code to a minimum and put all your domain logic into the model layer).\n\nIn fact, I would posit that a number of the changes in thinking we‚Äôve gone through as a community have been related to code organization. Where do you put that odd piece of code that doesn‚Äôt seem to fit in any of Rails‚Äô predefined slots?\n\nOne of the answers is to give Rails new slots:\n\n\n  The draper gem adds the app/decorators directory for ‚Äúview models,‚Äù i.e. view presenters.\n  The form objects design pattern adds the app/forms directory for handling complex forms.\n  The pundit gem adds the app/policies directory for specifying authorization rules.\n  The view_component gem adds the app/components directory for components that encapsulate view code.\n  Etc, etc.\n\n\nOf course Rails itself also adds new slots from time to time:\n\n\n  Rails 3.0 introduced concerns and the app/models/concerns folder for augmenting models.\n  Rails 4.2 introduced active job and the app/jobs folder for background jobs.\n  Also see app/assets, app/channels, etc.\n\n\nWhile all these also added awesome new features to Rails, let‚Äôs not overlook how significant it is that they introduced a bunch of additional slots to help us organize our code better. In fact, you‚Äôd probably agree that a lot of Rails‚Äô power comes from its predefined folder structure (just ask your favorite React dev üòè).\n\nService Objects\n\nService objects are yet another slot for organizing our Ruby code, albeit a fairly misunderstood one. For instance, although the community has produced a number of gems for creating service objects, we haven‚Äôt really coalesced around any one of them. That‚Äôs probably because service objects in their purest form are just Ruby classes with a fancy name.\n\nFor example, here‚Äôs a service object that creates a user:\n\nclass CreateUser\n  def self.call(params)\n    User.create(params)\n  end\nend\n\n\nNow, I hear you saying, ‚ÄúWait wait, that‚Äôs not what service objects are!‚Äù and you‚Äôre right. The term ‚Äúservice object‚Äù means different things to different people. In my opinion however, here‚Äôs what a ‚Äúservice object‚Äù is:\n\n\n  A plain ‚Äòol Ruby object with a call method.\n\n\nThat‚Äôs literally it.\n\nOk there is one other thing. You may have noticed that the name of the example service object above, CreateUser, sounds more like the name of a method than a class. That‚Äôs intentional.\n\nI like to think of service objects as representing actions.\n\nSkinny Controllers\n\n‚ÄúHey,‚Äù I hear you saying. ‚ÄúActions‚Ä¶ like in controllers?‚Äù\n\nYes! In the applications I‚Äôve worked on, service objects were extracted exclusively from controller actions.\n\nThis is the major point on which Jason and I differ. Whereas he writes about service objects as being part of the models directory, I think of them as being part of the controllers directory. In my mind, ‚Äúservices‚Äù are just miniature web applications. Service objects therefore should aid in responding to web requests.\n\nConsider again our humble CreateUser service object. We can easily imagine how the User.create call inside it could have once been part of a controller action:\n\nclass UsersController &lt; ApplicationController\n  def create\n    @user = User.create(user_params)\n\n    if @user.valid?\n      UserMailer.with(user: @user).welcome_email.deliver_later\n      redirect_to dashboard_path, notice: 'Welcome aboard!'\n    else\n      render :new\n    end\n  end\n\n  private\n\n  def user_params\n    params.require(:user).permit(:first_name, :last_name, :email_address)\n  end\nend\n\n\nNotice that the #create action creates the user, but also sends a welcome email.\n\nAs your app grows, so do your controller actions. Maybe you decide you want to register the user with your 3rd-party email/marketing system when they sign up. A few months later you decide to A/B test sending a free trial email at signup instead of the traditional welcome email:\n\nclass UsersController &lt; ApplicationController\n  def create\n    @user = User.create(user_params)\n\n    if @user.valid?\n      BrazeClient.new.register_email(@user.email_address)\n\n      if Flipper.enabled?(:free_trial_email_at_signup, @user)\n        UserMailer.with(user: @user).free_trial_email.deliver_later\n      else\n        UserMailer.with(user: @user).welcome_email.deliver_later\n      end\n\n      redirect_to dashboard_path, notice: 'Welcome aboard!'\n    else\n      render :new\n    end\n  end\n\n  private\n\n  def user_params\n    params.require(:user).permit(:first_name, :last_name, :email_address)\n  end\nend\n\n\nWhoa, that #create method is getting pretty long. More concerning though is how much logic it encapsulates - logic that can‚Äôt be reused outside the controller. In addition, I‚Äôve only shown a single action in this example. A complete RESTful controller will have seven.\n\nLet‚Äôs pull all that creation code into the service object instead:\n\nclass CreateUser\n  def self.call(params)\n    new(params).create\n  end\n\n  def initialize(params)\n    @params = params\n  end\n\n  def create\n    user.tap do |u|\n      if u.valid?\n        send_email_address_to_braze\n        send_signup_email\n      end\n    end\n  end\n\n  private\n\n  def send_email_address_to_braze\n    BrazeClient.new.register_email(user.email_address)\n  end\n\n  def send_signup_email\n    if send_free_trial_email?\n      UserMailer.with(user: user).free_trial_email.deliver_later\n    else\n      UserMailer.with(user: user).welcome_email.deliver_later\n    end\n  end\n\n  def send_free_trial_email?\n    Flipper.enabled?(:free_trial_email_at_signup, user)\n  end\n\n  def user\n    @user ||= User.create(@params)\n  end\nend\n\n\nI really like this. Not only is the public API minimal, I can hang a bunch of helper methods onto the class that I might have been hesitant to add to the controller.\n\nAnd by extracting the user creation logic into the service object, the controller now does a whole lot less:\n\nclass UsersController &lt; ApplicationController\n  def create\n    @user = CreateUser.(user_params)\n\n    if @user.valid?\n      redirect_to dashboard_path, notice: 'Welcome aboard!'\n    else\n      render :new\n    end\n  end\n\n  private\n\n  def user_params\n    params.require(:user).permit(:first_name, :last_name, :email_address)\n  end\nend\n\n\nBut skinny controllers aren‚Äôt the only benefit.\n\nBulk User Importer\n\nIn my mind, the most significant benefit of the service object approach is code reuse.\n\nLet‚Äôs say our company starts offering our services b2b and we need to create a bunch of user accounts for all the people who work at another company. We decide to add a bulk user importer to our system that‚Äôs capable of reading a CSV file and creating a bunch of user accounts all at once. This exact scenario came up at one of my previous jobs.\n\nFortunately, our user creation logic is conveniently encapsulated into a service object, so reusing it is a piece of cake:\n\nrequire 'csv'\n\nclass UserCsvFile\n  attr_reader :path\n\n  def initialize(path)\n    @path = path\n  end\n\n  def import\n    table.each do |row|\n      CreateUser.(row.to_h)\n    end\n  end\n\n  private\n\n  def table\n    @table ||= CSV.parse(File.read(path), headers: true)\n  end\nend\n\nUserCsvFile.new('/path/to/users.csv').import\n\n\nYou could copy and paste the code from the controller into the UserCsvFile class, but at what cost? Every time the controller changes, so does UserCsvFile. At some point, someone‚Äôs gonna forget to update both codepaths.\n\nThat‚Äôs‚Ä¶ all there is to it?\n\nI‚Äôm sure some of you reading this are now thoroughly fed up. Has it really taken this guy over a thousand words just to tell you about Ruby classes?\n\nWell, that‚Äôs the thing about service objects. They really can be that simple. In fact, service objects aren‚Äôt even a design pattern. They‚Äôre just a code organization tool for extracting chunks of procedural code from controller actions, i.e. ‚Äúdo this, then do this, then do this last thing.‚Äù The ‚Äúservice object‚Äù moniker is just a name. We could easily call these chunks of code ‚Äúactions‚Äù or maybe ‚Äúcommands‚Äù as Jason mentions.\n\nLoss of Object-Orientation\n\nIn his blog post, Jason makes the following assertion:\n\n\n  Service objects throw out the fundamental advantages of object-oriented programming.\n\n  ‚ÄúObjects‚Äù like this aren‚Äôt abstractions of concepts in the domain model. They‚Äôre chunks of procedural code masquerading as object-oriented code.\n\n\nHe‚Äôs absolutely right that service objects aren‚Äôt abstractions of concepts in the domain model. They exist to encapsulate procedural code. After all, controller actions tend to be procedural, so it follows that service objects are as well.\n\nThis encapsulation idea is one of the tenets of object-oriented programming; the data needed to perform the action is held by the object, and the object‚Äôs method‚Äôs (call in our case) uses that data to perform the action.\n\nAdvanced Techniques\n\nBecause service objects are just classes with basically no rules, you have the full power of the Ruby language at your disposal. Pretty much anything goes.\n\nFor example, consider the various ways our CreateUser operation can fail. Might be kinda nice to support some failure modes:\n\nclass UsersController &lt; ApplicationController\n  def create\n    CreateUser.(user_params) do |result|\n      # creation succeeded\n      result.success do |_user|\n        redirect_to dashboard_path, notice: 'Welcome aboard!'\n      end\n\n      # user is invalid\n      result.failure do |user|\n        @user = user\n        render :new\n      end\n\n      # CreateUser.() raised an error\n      result.error do |e|\n        Rollbar.error(e)\n        flash.now[:error] = 'Something went wrong, please try again'\n        render :new\n      end\n    end\n  end\n\n  private\n\n  def user_params\n    params.require(:user).permit(:first_name, :last_name, :email_address)\n  end\nend\n\n\nDang that‚Äôs nice üî•üî•üî•\n\nHere‚Äôs what the service object might look like:\n\nclass CreateUser\n  def self.call(params)\n    new(params).create\n  end\n\n  def initialize(params)\n    @params = params\n  end\n\n  def create\n    if user.valid?\n      send_email_address_to_braze\n      send_signup_email\n      Success.new(user)\n    else\n      Failure.new(user)\n    end\n  rescue Exception =&gt; e\n    Error.new(e)\n  end\n\n  private\n\n  def send_email_address_to_braze\n    BrazeClient.new.register_email(user.email_address)\n  end\n\n  def send_signup_email\n    if send_free_trial_email?\n      UserMailer.with(user: user).free_trial_email.deliver_later\n    else\n      UserMailer.with(user: user).welcome_email.deliver_later\n    end\n  end\n\n  def send_free_trial_email?\n    Flipper.enabled?(:free_trial_email_at_signup, user)\n  end\n\n  def user\n    @user ||= User.create(@params)\n  end\nend\n\n\nAnd finally here are the result classes:\n\nclass Result\n  def initialize(args)\n    @args = args\n  end\n\n  def success(&amp;block); end\n  def failure(&amp;block); end\n  def error(&amp;block); end\nend\n\nclass Success &lt; Result\n  def success(&amp;block)\n    yield *@args\n  end\nend\n\nclass Failure &lt; Result\n  def failure(&amp;block)\n    yield *@args\n  end\nend\n\nclass Error &lt; Result\n  def error(&amp;block)\n    yield *@args\n  end\nend\n\n\nConclusion\n\nI hope this article has explained why service objects deserve a place in your Rails app. Just remember to keep ‚Äòem out of your model code.\n\nDisagree? Hit me up on Twitter."
        },
          {
            "id": "404.html",
            "title": "404 Not Found",
            "categories": "",
            "tags": "",
            "url": "/404.html",
            "content": "Page not found :(\nThe requested page could not be found."
          },
          {
            "id": "about",
            "title": "About",
            "categories": "",
            "tags": "",
            "url": "/about/",
            "content": "This is the basic Bridgetown site template. You can find out more info about customizing your Bridgetown site, as well as basic Bridgetown usage documentation at bridgetownrb.com\n\nYou can find the source code for Bridgetown at GitHub:\nbridgetownrb /\nbridgetown"
          }
]
